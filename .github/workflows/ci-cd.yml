name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --out-format=colored-line-number

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        include:
          - goos: linux
            goarch: arm
        exclude:
          - goos: darwin
            goarch: arm
          - goos: windows
            goarch: arm64

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ "$VERSION" == "refs/heads/"* ]]; then
            VERSION=${GITHUB_SHA::8}
          fi

          OUTPUT_NAME=ssh-tunnel-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME=${OUTPUT_NAME}.exe
          fi

          mkdir -p dist
          go build \
            -trimpath \
            -ldflags "-X main.version=${VERSION} -X main.commit=${GITHUB_SHA::8} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o dist/${OUTPUT_NAME} \
            ./cmd/cli

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ssh-tunnel-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/ssh-tunnel-*

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ssh-tunnel-manager
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Prepare release assets
        run: |
          cd dist
          for dir in */; do
            cd "$dir"
            for file in *; do
              if [ -f "$file" ]; then
                tar -czf "../${file}.tar.gz" "$file"
              fi
            done
            cd ..
          done
          ls -la *.tar.gz

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    steps:
      - name: Notify on Success
        if: needs.release.result == 'success'
        run: echo "üéâ Release completed successfully!"

      - name: Notify on Failure
        if: needs.release.result == 'failure'
        run: echo "‚ùå Release failed!"
